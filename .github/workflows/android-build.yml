name: Android CI

on:
  push:
    branches: [ "release-notes-v2" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Set up signing keys
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > ${{ github.workspace }}/my-release-key.jks
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}

    # - name: Build APK
    #   run: ./gradlew assembleRelease
    #   env:
    #     KEYSTORE_FILE: ${{ github.workspace }}/my-release-key.jks
    #     KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
    #     KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
    #     KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    # - name: Rename APK file
    #   run: mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/lost-cities-calculator.apk

    # - name: Upload APK as artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: lost-cities-calculator
    #     path: app/build/outputs/apk/release/lost-cities-calculator.apk

    - name: Configure Git
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Fetch Latest Tag
      id: fetch_tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

    - name: Increment Version
      id: increment_version
      run: |
        MAJOR=${{ vars.MAJOR_VERSION }}
        MINOR=${{ vars.MINOR_VERSION }}
        TAG=${{ env.LATEST_TAG }}
        if [ -z "$TAG" ]; then
          TAG="v0.0.0"
        fi
        TAG=${TAG#v}
        CURRENT_MAJOR=${TAG%%.*}
        CURRENT_MINOR=${TAG#*.}
        CURRENT_MINOR=${CURRENT_MINOR%%.*}
        PATCH=${TAG##*.}

        # Reset patch version if major or minor versions change
        if [ "$MAJOR" -ne "$CURRENT_MAJOR" ] || [ "$MINOR" -ne "$CURRENT_MINOR" ]; then
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        # Construct the new version
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    # - name: Create and Push New Tag
    #   run: |
    #     git tag -a ${{ env.NEW_VERSION }} -m "Release version ${{ env.NEW_VERSION }}"
    #     git push origin ${{ env.NEW_VERSION }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Release Notes
      id: generate_notes
      run: |
        LAST_TAG=${{ env.LATEST_TAG }}
        NEW_TAG=${{ env.NEW_VERSION }}

        # Fetch the commit date of the latest tag in a consistent format
        TAG_COMMIT_DATE=$(git log -1 --format=%cI $LAST_TAG)
        TAG_DATE=$(date -u -d "$TAG_COMMIT_DATE" +%Y-%m-%dT%H:%M:%SZ)
        echo "TAG_DATE=$TAG_DATE" >> $GITHUB_ENV

        # Fetch merged PRs since the last tag using GitHub API
        API_URL="https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&base=master&sort=updated&direction=desc"
        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$API_URL")

        # Initialize release notes
        RELEASE_NOTES=""

        # Process each PR
        for PR in $(echo "$RESPONSE" | jq -c '.[]'); do
          PR_TITLE=$(echo "$PR" | jq -r '.title')
          PR_BODY=$(echo "$PR" | jq -r '.body // "No description"')
          PR_MERGED_AT=$(echo "$PR" | jq -r '.merged_at')

          # Fetch closed issues for each PR
          PR_NUMBER=$(echo "$PR" | jq -r '.number')
          ISSUES_API_URL="https://api.github.com/repos/${{ github.repository }}/issues?state=closed&per_page=100"
          ISSUES_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$ISSUES_API_URL")

          # Extract issues closed by this PR
          CLOSED_ISSUES=$(echo "$ISSUES_RESPONSE" | jq -r --arg PR_NUMBER "$PR_NUMBER" '
            .[] | select(.pull_request != null and .pull_request.url | test("pulls/" + $PR_NUMBER)) |
            "â€¢ \(.title)"' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          # Append PR details to release notes
          PR_NOTES=$(echo -e "$PR_TITLE\n$(echo "$PR_BODY" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')\n\nMerged at: $PR_MERGED_AT\n\nClosed Issues:\n$CLOSED_ISSUES\n\n---\n\n")
          RELEASE_NOTES+="$PR_NOTES"
        done

        # Handle empty output
        if [ -z "$RELEASE_NOTES" ]; then
          RELEASE_NOTES="No new PRs since the last tag."
        fi

        # Print debug information
        echo -e "LAST_TAG = ${LAST_TAG}"
        echo -e "NEW_TAG = ${NEW_TAG}"
        echo -e "RELEASE_NOTES = ${RELEASE_NOTES}"
        echo -e "LAST_TAG_DATE = ${TAG_DATE}"

        echo "RELEASE_NOTES=Release Notes:\n${RELEASE_NOTES}" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




    # - name: Create Release and Upload APK
    #   uses: softprops/action-gh-release@v2
    #   with:
    #     tag_name: ${{ env.NEW_VERSION }}
    #     files: ./app/build/outputs/apk/release/lost-cities-calculator.apk
    #     body: ${{ env.RELEASE_NOTES }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
