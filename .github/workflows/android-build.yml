name: Android CI

on:
  push:
    branches: [ "release-notes-v2" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Set up signing keys
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > ${{ github.workspace }}/my-release-key.jks
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}

    # - name: Build APK
    #   run: ./gradlew assembleRelease
    #   env:
    #     KEYSTORE_FILE: ${{ github.workspace }}/my-release-key.jks
    #     KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
    #     KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
    #     KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    # - name: Rename APK file
    #   run: mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/lost-cities-calculator.apk

    # - name: Upload APK as artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: lost-cities-calculator
    #     path: app/build/outputs/apk/release/lost-cities-calculator.apk

    - name: Configure Git
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Fetch Latest Tag
      id: fetch_tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

    - name: Increment Version
      id: increment_version
      run: |
        MAJOR=${{ vars.MAJOR_VERSION }}
        MINOR=${{ vars.MINOR_VERSION }}
        TAG=${{ env.LATEST_TAG }}
        if [ -z "$TAG" ]; then
          TAG="v0.0.0"
        fi
        TAG=${TAG#v}
        CURRENT_MAJOR=${TAG%%.*}
        CURRENT_MINOR=${TAG#*.}
        CURRENT_MINOR=${CURRENT_MINOR%%.*}
        PATCH=${TAG##*.}

        # Reset patch version if major or minor versions change
        if [ "$MAJOR" -ne "$CURRENT_MAJOR" ] || [ "$MINOR" -ne "$CURRENT_MINOR" ]; then
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        # Construct the new version
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    # - name: Create and Push New Tag
    #   run: |
    #     git tag -a ${{ env.NEW_VERSION }} -m "Release version ${{ env.NEW_VERSION }}"
    #     git push origin ${{ env.NEW_VERSION }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Release Notes
      id: generate_notes
      run: |
        LAST_TAG=${{ env.LATEST_TAG }}
        NEW_TAG=${{ env.NEW_VERSION }}
        
        # Fetch merged PRs since the last tag
        RELEASE_NOTES=$(gh pr list --search "is:merged base:master merged:>${LAST_TAG}" --json title,body --jq '.[] | 
        "## \(.title)\n\n\(.body)\n\n---\n\n"' | sed ':a;N;$!ba;s/\n/\\n/g')
        
        # Optionally, fetch closed issues separately if needed
        CLOSED_ISSUES=$(gh issue list --search "is:closed closed:>${LAST_TAG}" --json number,title --jq '.[] | 
        "- #\(.number) \(.title)"' | sed ':a;N;$!ba;s/\n/\\n/g')

        echo -e "Last Tag = ${LAST_TAG}"
        echo -e "New Tag = ${NEW_TAG}"
        echo -e "Release Notes:\n${RELEASE_NOTES}\n\nClosed Issues:\n${CLOSED_ISSUES}"
        echo "RELEASE_NOTES=Release Notes:\n${RELEASE_NOTES}\n\nClosed Issues:\n${CLOSED_ISSUES}" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # - name: Create Release and Upload APK
    #   uses: softprops/action-gh-release@v2
    #   with:
    #     tag_name: ${{ env.NEW_VERSION }}
    #     files: ./app/build/outputs/apk/release/lost-cities-calculator.apk
    #     body: ${{ env.RELEASE_NOTES }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
